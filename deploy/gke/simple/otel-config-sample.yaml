# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This file demonstrates how the final configuration for OTel collector might look like 
# after following the steps in "Try it out section" in the README. 
#
# NOTE: This file should only be used as a reference, the presence or absence of this file does
# not affect the workings of the OTel Collector.

receivers:
  otlp:
    protocols:
      grpc:
      http:
  # This reciever configures the collector to listen for otlp data from json files that match the
  # include glob path.    
  otlpjsonfile:
    start_at: "beginning"
    include:
      - "/mnt/testdata/metrics/*.json"
      - "/mnt/testdata/traces/*.json"
      - "/mnt/testdata/logs/*.json"

  prometheus/self:
    config:
      scrape_configs:
      - job_name: 'otel-collector'
        scrape_interval: 10s
        static_configs:
        - targets: ['0.0.0.0:8888']
        # I get duplicate label errors on export without dropping the incoming labels.
        metric_relabel_configs:
        - regex: service_instance_id
          action: labeldrop
        - regex: service_version
          action: labeldrop

exporters:
  googlecloud:
    project: otel-test # Replace this with your Google Cloud Project ID
    retry_on_failure:
      enabled: false
    log:
      default_log_name: otel-collector-builder-sample/gke-simple-demo # This could be anything

  googlemanagedprometheus:

#   googlecloudpubsub:
#     project: my-project
#     topic: my-topic

  logging:
    loglevel: debug

processors:
  resourcedetection/gke:
    detectors: [env, gcp]
    timeout: 2s
    override: false

  memory_limiter:
    check_interval: 1s
    limit_percentage: 65
    spike_limit_percentage: 20
  
  batch:
    send_batch_max_size: 200
    send_batch_size: 200

service:
  pipelines:
    traces:
      receivers: [otlp, otlpjsonfile] # Add the otlpjsonfile reciever in the pipeline
      processors: [memory_limiter, batch, resourcedetection/gke]
      exporters: [googlecloud, logging]

    metrics:
      receivers: [otlp, prometheus/self, otlpjsonfile] # Add the otlpjsonfile reciever in the pipeline
      processors: [memory_limiter, batch, resourcedetection/gke]
      exporters: [googlecloud, logging]

    logs:
      receivers: [otlp, otlpjsonfile] # Add the otlpjsonfile reciever in the pipeline
      processors: [memory_limiter, batch, resourcedetection/gke]
      exporters: [googlecloud, logging]
